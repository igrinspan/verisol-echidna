pragma solidity >=0.4.24 <0.9.0;

contract CrowdfundingR {
	modifier hasInitialized {
		require(has_initialized); 
		_; 
	}

	modifier hasNotInitialized {
		require(!has_initialized); 
		_; 
	}

	bool has_initialized = false;

	function vc1x0x0() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] == 0);
		Donate();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc1x1x0() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] == 0);
		Donate();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc1x2x0() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] == 0);
		Donate();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc1x3x0() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] == 0);
		Donate();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc1x4x0() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] == 0);
		Donate();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc1x5x0() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] == 0);
		Donate();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc1x6x0() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] == 0);
		Donate();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc1x7x0() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] == 0);
		Donate();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc1x8x0() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] == 0);
		Donate();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc1x9x0() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] == 0);
		Donate();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc1x10x0() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] == 0);
		Donate();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc1x11x0() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] == 0);
		Donate();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc1x12x0() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] == 0);
		Donate();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc1x13x0() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] == 0);
		Donate();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc1x14x0() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] == 0);
		Donate();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc1x15x0() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] == 0);
		Donate();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc1x16x0() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] == 0);
		Donate();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc1x17x0() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] == 0);
		Donate();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc1x18x0() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] == 0);
		Donate();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc1x19x0() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] == 0);
		Donate();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc1x20x0() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] == 0);
		Donate();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc1x21x0() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] == 0);
		Donate();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc1x22x0() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] == 0);
		Donate();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc1x23x0() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] == 0);
		Donate();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc1x24x0() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] == 0);
		Donate();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc1x25x0() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] == 0);
		Donate();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc1x26x0() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] == 0);
		Donate();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc1x27x0() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] == 0);
		Donate();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc1x28x0() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] == 0);
		Donate();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc1x29x0() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] == 0);
		Donate();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc1x30x0() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] == 0);
		Donate();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc1x31x0() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] == 0);
		Donate();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc2x0x1() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(msg.sender == owner);
		GetFunds();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc2x1x1() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(msg.sender == owner);
		GetFunds();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc2x2x1() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(msg.sender == owner);
		GetFunds();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc2x3x1() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(msg.sender == owner);
		GetFunds();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc2x4x1() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(msg.sender == owner);
		GetFunds();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc2x5x1() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(msg.sender == owner);
		GetFunds();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc2x6x1() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(msg.sender == owner);
		GetFunds();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc2x7x1() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(msg.sender == owner);
		GetFunds();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc2x8x1() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(msg.sender == owner);
		GetFunds();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc2x9x1() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(msg.sender == owner);
		GetFunds();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc2x10x1() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(msg.sender == owner);
		GetFunds();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc2x11x1() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(msg.sender == owner);
		GetFunds();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc2x12x1() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(msg.sender == owner);
		GetFunds();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc2x13x1() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(msg.sender == owner);
		GetFunds();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc2x14x1() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(msg.sender == owner);
		GetFunds();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc2x15x1() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(msg.sender == owner);
		GetFunds();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc2x16x1() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(msg.sender == owner);
		GetFunds();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc2x17x1() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(msg.sender == owner);
		GetFunds();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc2x18x1() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(msg.sender == owner);
		GetFunds();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc2x19x1() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(msg.sender == owner);
		GetFunds();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc2x20x1() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(msg.sender == owner);
		GetFunds();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc2x21x1() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(msg.sender == owner);
		GetFunds();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc2x22x1() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(msg.sender == owner);
		GetFunds();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc2x23x1() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(msg.sender == owner);
		GetFunds();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc2x24x1() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(msg.sender == owner);
		GetFunds();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc2x25x1() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(msg.sender == owner);
		GetFunds();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc2x26x1() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(msg.sender == owner);
		GetFunds();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc2x27x1() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(msg.sender == owner);
		GetFunds();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc2x28x1() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(msg.sender == owner);
		GetFunds();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc2x29x1() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(msg.sender == owner);
		GetFunds();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc2x30x1() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(msg.sender == owner);
		GetFunds();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc2x31x1() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(msg.sender == owner);
		GetFunds();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc3x0x2() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc3x1x2() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc3x2x2() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc3x3x2() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc3x4x2() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc3x5x2() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc3x6x2() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc3x7x2() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc3x8x2() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc3x9x2() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc3x10x2() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc3x11x2() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc3x12x2() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc3x13x2() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc3x14x2() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc3x15x2() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc3x16x2() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc3x17x2() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc3x18x2() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc3x19x2() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc3x20x2() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc3x21x2() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc3x22x2() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc3x23x2() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc3x24x2() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc3x25x2() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc3x26x2() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc3x27x2() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc3x28x2() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc3x29x2() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc3x30x2() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc3x31x2() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc4x0x3() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc4x1x3() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc4x2x3() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc4x3x3() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc4x4x3() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc4x5x3() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc4x6x3() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc4x7x3() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc4x8x3() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc4x9x3() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc4x10x3() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc4x11x3() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc4x12x3() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc4x13x3() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc4x14x3() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc4x15x3() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc4x16x3() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc4x17x3() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc4x18x3() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc4x19x3() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc4x20x3() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc4x21x3() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc4x22x3() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc4x23x3() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc4x24x3() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc4x25x3() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc4x26x3() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc4x27x3() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc4x28x3() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc4x29x3() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc4x30x3() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc4x31x3() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc5x0x4() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		t();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc5x1x4() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		t();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc5x2x4() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		t();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc5x3x4() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		t();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc5x4x4() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		t();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc5x5x4() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		t();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc5x6x4() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		t();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc5x7x4() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		t();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc5x8x4() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		t();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc5x9x4() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		t();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc5x10x4() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		t();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc5x11x4() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		t();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc5x12x4() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		t();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc5x13x4() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		t();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc5x14x4() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		t();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc5x15x4() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		t();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc5x16x4() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		t();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc5x17x4() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		t();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc5x18x4() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		t();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc5x19x4() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		t();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc5x20x4() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		t();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc5x21x4() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		t();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc5x22x4() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		t();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc5x23x4() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		t();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc5x24x4() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		t();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc5x25x4() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		t();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc5x26x4() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		t();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc5x27x4() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		t();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc5x28x4() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		t();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc5x29x4() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		t();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc5x30x4() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		t();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc5x31x4() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		t();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc6x0x0() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] == 0);
		Donate();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc6x0x1() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(msg.sender == owner);
		GetFunds();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc6x1x0() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] == 0);
		Donate();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc6x1x1() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(msg.sender == owner);
		GetFunds();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc6x2x0() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] == 0);
		Donate();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc6x2x1() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(msg.sender == owner);
		GetFunds();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc6x3x0() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] == 0);
		Donate();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc6x3x1() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(msg.sender == owner);
		GetFunds();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc6x4x0() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] == 0);
		Donate();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc6x4x1() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(msg.sender == owner);
		GetFunds();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc6x5x0() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] == 0);
		Donate();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc6x5x1() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(msg.sender == owner);
		GetFunds();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc6x6x0() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] == 0);
		Donate();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc6x6x1() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(msg.sender == owner);
		GetFunds();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc6x7x0() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] == 0);
		Donate();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc6x7x1() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(msg.sender == owner);
		GetFunds();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc6x8x0() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] == 0);
		Donate();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc6x8x1() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(msg.sender == owner);
		GetFunds();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc6x9x0() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] == 0);
		Donate();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc6x9x1() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(msg.sender == owner);
		GetFunds();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc6x10x0() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] == 0);
		Donate();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc6x10x1() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(msg.sender == owner);
		GetFunds();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc6x11x0() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] == 0);
		Donate();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc6x11x1() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(msg.sender == owner);
		GetFunds();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc6x12x0() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] == 0);
		Donate();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc6x12x1() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(msg.sender == owner);
		GetFunds();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc6x13x0() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] == 0);
		Donate();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc6x13x1() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(msg.sender == owner);
		GetFunds();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc6x14x0() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] == 0);
		Donate();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc6x14x1() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(msg.sender == owner);
		GetFunds();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc6x15x0() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] == 0);
		Donate();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc6x15x1() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(msg.sender == owner);
		GetFunds();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc6x16x0() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] == 0);
		Donate();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc6x16x1() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(msg.sender == owner);
		GetFunds();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc6x17x0() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] == 0);
		Donate();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc6x17x1() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(msg.sender == owner);
		GetFunds();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc6x18x0() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] == 0);
		Donate();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc6x18x1() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(msg.sender == owner);
		GetFunds();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc6x19x0() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] == 0);
		Donate();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc6x19x1() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(msg.sender == owner);
		GetFunds();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc6x20x0() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] == 0);
		Donate();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc6x20x1() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(msg.sender == owner);
		GetFunds();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc6x21x0() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] == 0);
		Donate();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc6x21x1() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(msg.sender == owner);
		GetFunds();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc6x22x0() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] == 0);
		Donate();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc6x22x1() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(msg.sender == owner);
		GetFunds();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc6x23x0() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] == 0);
		Donate();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc6x23x1() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(msg.sender == owner);
		GetFunds();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc6x24x0() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] == 0);
		Donate();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc6x24x1() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(msg.sender == owner);
		GetFunds();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc6x25x0() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] == 0);
		Donate();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc6x25x1() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(msg.sender == owner);
		GetFunds();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc6x26x0() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] == 0);
		Donate();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc6x26x1() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(msg.sender == owner);
		GetFunds();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc6x27x0() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] == 0);
		Donate();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc6x27x1() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(msg.sender == owner);
		GetFunds();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc6x28x0() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] == 0);
		Donate();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc6x28x1() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(msg.sender == owner);
		GetFunds();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc6x29x0() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] == 0);
		Donate();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc6x29x1() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(msg.sender == owner);
		GetFunds();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc6x30x0() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] == 0);
		Donate();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc6x30x1() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(msg.sender == owner);
		GetFunds();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc6x31x0() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] == 0);
		Donate();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc6x31x1() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(msg.sender == owner);
		GetFunds();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc7x0x0() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] == 0);
		Donate();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc7x0x2() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc7x1x0() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] == 0);
		Donate();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc7x1x2() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc7x2x0() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] == 0);
		Donate();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc7x2x2() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc7x3x0() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] == 0);
		Donate();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc7x3x2() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc7x4x0() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] == 0);
		Donate();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc7x4x2() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc7x5x0() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] == 0);
		Donate();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc7x5x2() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc7x6x0() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] == 0);
		Donate();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc7x6x2() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc7x7x0() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] == 0);
		Donate();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc7x7x2() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc7x8x0() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] == 0);
		Donate();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc7x8x2() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc7x9x0() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] == 0);
		Donate();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc7x9x2() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc7x10x0() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] == 0);
		Donate();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc7x10x2() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc7x11x0() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] == 0);
		Donate();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc7x11x2() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc7x12x0() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] == 0);
		Donate();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc7x12x2() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc7x13x0() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] == 0);
		Donate();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc7x13x2() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc7x14x0() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] == 0);
		Donate();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc7x14x2() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc7x15x0() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] == 0);
		Donate();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc7x15x2() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc7x16x0() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] == 0);
		Donate();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc7x16x2() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc7x17x0() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] == 0);
		Donate();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc7x17x2() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc7x18x0() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] == 0);
		Donate();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc7x18x2() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc7x19x0() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] == 0);
		Donate();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc7x19x2() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc7x20x0() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] == 0);
		Donate();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc7x20x2() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc7x21x0() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] == 0);
		Donate();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc7x21x2() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc7x22x0() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] == 0);
		Donate();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc7x22x2() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc7x23x0() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] == 0);
		Donate();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc7x23x2() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc7x24x0() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] == 0);
		Donate();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc7x24x2() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc7x25x0() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] == 0);
		Donate();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc7x25x2() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc7x26x0() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] == 0);
		Donate();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc7x26x2() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc7x27x0() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] == 0);
		Donate();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc7x27x2() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc7x28x0() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] == 0);
		Donate();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc7x28x2() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc7x29x0() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] == 0);
		Donate();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc7x29x2() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc7x30x0() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] == 0);
		Donate();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc7x30x2() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc7x31x0() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] == 0);
		Donate();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc7x31x2() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc8x0x0() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] == 0);
		Donate();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc8x0x3() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc8x1x0() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] == 0);
		Donate();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc8x1x3() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc8x2x0() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] == 0);
		Donate();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc8x2x3() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc8x3x0() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] == 0);
		Donate();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc8x3x3() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc8x4x0() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] == 0);
		Donate();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc8x4x3() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc8x5x0() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] == 0);
		Donate();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc8x5x3() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc8x6x0() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] == 0);
		Donate();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc8x6x3() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc8x7x0() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] == 0);
		Donate();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc8x7x3() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc8x8x0() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] == 0);
		Donate();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc8x8x3() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc8x9x0() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] == 0);
		Donate();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc8x9x3() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc8x10x0() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] == 0);
		Donate();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc8x10x3() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc8x11x0() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] == 0);
		Donate();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc8x11x3() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc8x12x0() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] == 0);
		Donate();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc8x12x3() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc8x13x0() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] == 0);
		Donate();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc8x13x3() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc8x14x0() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] == 0);
		Donate();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc8x14x3() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc8x15x0() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] == 0);
		Donate();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc8x15x3() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc8x16x0() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] == 0);
		Donate();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc8x16x3() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc8x17x0() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] == 0);
		Donate();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc8x17x3() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc8x18x0() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] == 0);
		Donate();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc8x18x3() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc8x19x0() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] == 0);
		Donate();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc8x19x3() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc8x20x0() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] == 0);
		Donate();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc8x20x3() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc8x21x0() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] == 0);
		Donate();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc8x21x3() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc8x22x0() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] == 0);
		Donate();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc8x22x3() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc8x23x0() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] == 0);
		Donate();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc8x23x3() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc8x24x0() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] == 0);
		Donate();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc8x24x3() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc8x25x0() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] == 0);
		Donate();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc8x25x3() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc8x26x0() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] == 0);
		Donate();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc8x26x3() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc8x27x0() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] == 0);
		Donate();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc8x27x3() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc8x28x0() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] == 0);
		Donate();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc8x28x3() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc8x29x0() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] == 0);
		Donate();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc8x29x3() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc8x30x0() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] == 0);
		Donate();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc8x30x3() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc8x31x0() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] == 0);
		Donate();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc8x31x3() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc9x0x0() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(backers[msg.sender] == 0);
		Donate();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc9x0x4() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		t();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc9x1x0() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(backers[msg.sender] == 0);
		Donate();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc9x1x4() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		t();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc9x2x0() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(backers[msg.sender] == 0);
		Donate();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc9x2x4() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		t();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc9x3x0() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(backers[msg.sender] == 0);
		Donate();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc9x3x4() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		t();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc9x4x0() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(backers[msg.sender] == 0);
		Donate();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc9x4x4() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		t();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc9x5x0() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(backers[msg.sender] == 0);
		Donate();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc9x5x4() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		t();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc9x6x0() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(backers[msg.sender] == 0);
		Donate();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc9x6x4() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		t();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc9x7x0() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(backers[msg.sender] == 0);
		Donate();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc9x7x4() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		t();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc9x8x0() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(backers[msg.sender] == 0);
		Donate();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc9x8x4() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		t();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc9x9x0() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(backers[msg.sender] == 0);
		Donate();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc9x9x4() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		t();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc9x10x0() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(backers[msg.sender] == 0);
		Donate();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc9x10x4() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		t();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc9x11x0() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(backers[msg.sender] == 0);
		Donate();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc9x11x4() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		t();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc9x12x0() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(backers[msg.sender] == 0);
		Donate();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc9x12x4() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		t();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc9x13x0() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(backers[msg.sender] == 0);
		Donate();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc9x13x4() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		t();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc9x14x0() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(backers[msg.sender] == 0);
		Donate();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc9x14x4() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		t();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc9x15x0() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(backers[msg.sender] == 0);
		Donate();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc9x15x4() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		t();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc9x16x0() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(backers[msg.sender] == 0);
		Donate();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc9x16x4() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		t();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc9x17x0() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(backers[msg.sender] == 0);
		Donate();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc9x17x4() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		t();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc9x18x0() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(backers[msg.sender] == 0);
		Donate();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc9x18x4() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		t();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc9x19x0() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(backers[msg.sender] == 0);
		Donate();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc9x19x4() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		t();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc9x20x0() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(backers[msg.sender] == 0);
		Donate();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc9x20x4() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		t();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc9x21x0() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(backers[msg.sender] == 0);
		Donate();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc9x21x4() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		t();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc9x22x0() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(backers[msg.sender] == 0);
		Donate();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc9x22x4() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		t();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc9x23x0() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(backers[msg.sender] == 0);
		Donate();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc9x23x4() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		t();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc9x24x0() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(backers[msg.sender] == 0);
		Donate();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc9x24x4() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		t();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc9x25x0() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(backers[msg.sender] == 0);
		Donate();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc9x25x4() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		t();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc9x26x0() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(backers[msg.sender] == 0);
		Donate();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc9x26x4() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		t();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc9x27x0() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(backers[msg.sender] == 0);
		Donate();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc9x27x4() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		t();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc9x28x0() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(backers[msg.sender] == 0);
		Donate();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc9x28x4() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		t();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc9x29x0() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(backers[msg.sender] == 0);
		Donate();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc9x29x4() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		t();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc9x30x0() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(backers[msg.sender] == 0);
		Donate();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc9x30x4() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		t();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc9x31x0() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(backers[msg.sender] == 0);
		Donate();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc9x31x4() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		t();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc10x0x1() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(msg.sender == owner);
		GetFunds();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc10x0x2() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc10x1x1() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(msg.sender == owner);
		GetFunds();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc10x1x2() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc10x2x1() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(msg.sender == owner);
		GetFunds();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc10x2x2() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc10x3x1() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(msg.sender == owner);
		GetFunds();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc10x3x2() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc10x4x1() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(msg.sender == owner);
		GetFunds();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc10x4x2() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc10x5x1() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(msg.sender == owner);
		GetFunds();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc10x5x2() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc10x6x1() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(msg.sender == owner);
		GetFunds();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc10x6x2() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc10x7x1() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(msg.sender == owner);
		GetFunds();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc10x7x2() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc10x8x1() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(msg.sender == owner);
		GetFunds();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc10x8x2() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc10x9x1() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(msg.sender == owner);
		GetFunds();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc10x9x2() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc10x10x1() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(msg.sender == owner);
		GetFunds();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc10x10x2() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc10x11x1() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(msg.sender == owner);
		GetFunds();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc10x11x2() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc10x12x1() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(msg.sender == owner);
		GetFunds();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc10x12x2() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc10x13x1() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(msg.sender == owner);
		GetFunds();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc10x13x2() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc10x14x1() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(msg.sender == owner);
		GetFunds();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc10x14x2() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc10x15x1() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(msg.sender == owner);
		GetFunds();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc10x15x2() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc10x16x1() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(msg.sender == owner);
		GetFunds();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc10x16x2() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc10x17x1() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(msg.sender == owner);
		GetFunds();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc10x17x2() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc10x18x1() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(msg.sender == owner);
		GetFunds();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc10x18x2() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc10x19x1() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(msg.sender == owner);
		GetFunds();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc10x19x2() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc10x20x1() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(msg.sender == owner);
		GetFunds();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc10x20x2() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc10x21x1() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(msg.sender == owner);
		GetFunds();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc10x21x2() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc10x22x1() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(msg.sender == owner);
		GetFunds();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc10x22x2() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc10x23x1() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(msg.sender == owner);
		GetFunds();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc10x23x2() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc10x24x1() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(msg.sender == owner);
		GetFunds();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc10x24x2() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc10x25x1() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(msg.sender == owner);
		GetFunds();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc10x25x2() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc10x26x1() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(msg.sender == owner);
		GetFunds();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc10x26x2() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc10x27x1() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(msg.sender == owner);
		GetFunds();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc10x27x2() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc10x28x1() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(msg.sender == owner);
		GetFunds();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc10x28x2() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc10x29x1() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(msg.sender == owner);
		GetFunds();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc10x29x2() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc10x30x1() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(msg.sender == owner);
		GetFunds();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc10x30x2() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc10x31x1() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(msg.sender == owner);
		GetFunds();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc10x31x2() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc11x0x1() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(msg.sender == owner);
		GetFunds();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc11x0x3() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc11x1x1() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(msg.sender == owner);
		GetFunds();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc11x1x3() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc11x2x1() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(msg.sender == owner);
		GetFunds();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc11x2x3() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc11x3x1() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(msg.sender == owner);
		GetFunds();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc11x3x3() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc11x4x1() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(msg.sender == owner);
		GetFunds();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc11x4x3() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc11x5x1() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(msg.sender == owner);
		GetFunds();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc11x5x3() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc11x6x1() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(msg.sender == owner);
		GetFunds();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc11x6x3() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc11x7x1() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(msg.sender == owner);
		GetFunds();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc11x7x3() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc11x8x1() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(msg.sender == owner);
		GetFunds();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc11x8x3() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc11x9x1() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(msg.sender == owner);
		GetFunds();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc11x9x3() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc11x10x1() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(msg.sender == owner);
		GetFunds();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc11x10x3() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc11x11x1() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(msg.sender == owner);
		GetFunds();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc11x11x3() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc11x12x1() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(msg.sender == owner);
		GetFunds();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc11x12x3() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc11x13x1() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(msg.sender == owner);
		GetFunds();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc11x13x3() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc11x14x1() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(msg.sender == owner);
		GetFunds();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc11x14x3() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc11x15x1() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(msg.sender == owner);
		GetFunds();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc11x15x3() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc11x16x1() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(msg.sender == owner);
		GetFunds();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc11x16x3() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc11x17x1() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(msg.sender == owner);
		GetFunds();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc11x17x3() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc11x18x1() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(msg.sender == owner);
		GetFunds();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc11x18x3() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc11x19x1() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(msg.sender == owner);
		GetFunds();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc11x19x3() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc11x20x1() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(msg.sender == owner);
		GetFunds();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc11x20x3() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc11x21x1() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(msg.sender == owner);
		GetFunds();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc11x21x3() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc11x22x1() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(msg.sender == owner);
		GetFunds();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc11x22x3() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc11x23x1() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(msg.sender == owner);
		GetFunds();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc11x23x3() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc11x24x1() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(msg.sender == owner);
		GetFunds();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc11x24x3() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc11x25x1() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(msg.sender == owner);
		GetFunds();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc11x25x3() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc11x26x1() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(msg.sender == owner);
		GetFunds();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc11x26x3() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc11x27x1() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(msg.sender == owner);
		GetFunds();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc11x27x3() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc11x28x1() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(msg.sender == owner);
		GetFunds();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc11x28x3() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc11x29x1() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(msg.sender == owner);
		GetFunds();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc11x29x3() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc11x30x1() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(msg.sender == owner);
		GetFunds();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc11x30x3() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc11x31x1() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(msg.sender == owner);
		GetFunds();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc11x31x3() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc12x0x1() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(msg.sender == owner);
		GetFunds();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc12x0x4() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		t();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc12x1x1() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(msg.sender == owner);
		GetFunds();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc12x1x4() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		t();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc12x2x1() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(msg.sender == owner);
		GetFunds();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc12x2x4() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		t();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc12x3x1() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(msg.sender == owner);
		GetFunds();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc12x3x4() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		t();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc12x4x1() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(msg.sender == owner);
		GetFunds();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc12x4x4() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		t();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc12x5x1() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(msg.sender == owner);
		GetFunds();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc12x5x4() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		t();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc12x6x1() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(msg.sender == owner);
		GetFunds();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc12x6x4() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		t();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc12x7x1() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(msg.sender == owner);
		GetFunds();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc12x7x4() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		t();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc12x8x1() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(msg.sender == owner);
		GetFunds();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc12x8x4() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		t();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc12x9x1() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(msg.sender == owner);
		GetFunds();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc12x9x4() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		t();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc12x10x1() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(msg.sender == owner);
		GetFunds();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc12x10x4() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		t();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc12x11x1() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(msg.sender == owner);
		GetFunds();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc12x11x4() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		t();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc12x12x1() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(msg.sender == owner);
		GetFunds();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc12x12x4() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		t();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc12x13x1() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(msg.sender == owner);
		GetFunds();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc12x13x4() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		t();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc12x14x1() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(msg.sender == owner);
		GetFunds();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc12x14x4() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		t();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc12x15x1() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(msg.sender == owner);
		GetFunds();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc12x15x4() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		t();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc12x16x1() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(msg.sender == owner);
		GetFunds();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc12x16x4() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		t();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc12x17x1() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(msg.sender == owner);
		GetFunds();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc12x17x4() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		t();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc12x18x1() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(msg.sender == owner);
		GetFunds();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc12x18x4() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		t();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc12x19x1() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(msg.sender == owner);
		GetFunds();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc12x19x4() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		t();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc12x20x1() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(msg.sender == owner);
		GetFunds();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc12x20x4() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		t();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc12x21x1() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(msg.sender == owner);
		GetFunds();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc12x21x4() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		t();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc12x22x1() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(msg.sender == owner);
		GetFunds();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc12x22x4() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		t();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc12x23x1() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(msg.sender == owner);
		GetFunds();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc12x23x4() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		t();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc12x24x1() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(msg.sender == owner);
		GetFunds();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc12x24x4() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		t();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc12x25x1() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(msg.sender == owner);
		GetFunds();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc12x25x4() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		t();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc12x26x1() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(msg.sender == owner);
		GetFunds();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc12x26x4() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		t();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc12x27x1() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(msg.sender == owner);
		GetFunds();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc12x27x4() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		t();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc12x28x1() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(msg.sender == owner);
		GetFunds();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc12x28x4() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		t();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc12x29x1() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(msg.sender == owner);
		GetFunds();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc12x29x4() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		t();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc12x30x1() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(msg.sender == owner);
		GetFunds();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc12x30x4() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		t();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc12x31x1() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(msg.sender == owner);
		GetFunds();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc12x31x4() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		t();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc13x0x2() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc13x0x3() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc13x1x2() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc13x1x3() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc13x2x2() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc13x2x3() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc13x3x2() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc13x3x3() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc13x4x2() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc13x4x3() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc13x5x2() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc13x5x3() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc13x6x2() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc13x6x3() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc13x7x2() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc13x7x3() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc13x8x2() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc13x8x3() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc13x9x2() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc13x9x3() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc13x10x2() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc13x10x3() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc13x11x2() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc13x11x3() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc13x12x2() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc13x12x3() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc13x13x2() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc13x13x3() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc13x14x2() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc13x14x3() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc13x15x2() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc13x15x3() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc13x16x2() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc13x16x3() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc13x17x2() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc13x17x3() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc13x18x2() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc13x18x3() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc13x19x2() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc13x19x3() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc13x20x2() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc13x20x3() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc13x21x2() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc13x21x3() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc13x22x2() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc13x22x3() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc13x23x2() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc13x23x3() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc13x24x2() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc13x24x3() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc13x25x2() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc13x25x3() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc13x26x2() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc13x26x3() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc13x27x2() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc13x27x3() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc13x28x2() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc13x28x3() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc13x29x2() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc13x29x3() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc13x30x2() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc13x30x3() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc13x31x2() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc13x31x3() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc14x0x2() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc14x0x4() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		t();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc14x1x2() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc14x1x4() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		t();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc14x2x2() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc14x2x4() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		t();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc14x3x2() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc14x3x4() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		t();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc14x4x2() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc14x4x4() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		t();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc14x5x2() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc14x5x4() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		t();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc14x6x2() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc14x6x4() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		t();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc14x7x2() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc14x7x4() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		t();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc14x8x2() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc14x8x4() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		t();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc14x9x2() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc14x9x4() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		t();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc14x10x2() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc14x10x4() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		t();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc14x11x2() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc14x11x4() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		t();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc14x12x2() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc14x12x4() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		t();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc14x13x2() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc14x13x4() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		t();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc14x14x2() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc14x14x4() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		t();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc14x15x2() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc14x15x4() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		t();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc14x16x2() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc14x16x4() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		t();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc14x17x2() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc14x17x4() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		t();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc14x18x2() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc14x18x4() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		t();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc14x19x2() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc14x19x4() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		t();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc14x20x2() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc14x20x4() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		t();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc14x21x2() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc14x21x4() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		t();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc14x22x2() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc14x22x4() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		t();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc14x23x2() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc14x23x4() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		t();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc14x24x2() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc14x24x4() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		t();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc14x25x2() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc14x25x4() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		t();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc14x26x2() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc14x26x4() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		t();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc14x27x2() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc14x27x4() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		t();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc14x28x2() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc14x28x4() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		t();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc14x29x2() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc14x29x4() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		t();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc14x30x2() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc14x30x4() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		t();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc14x31x2() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc14x31x4() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		t();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc15x0x3() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc15x0x4() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		t();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc15x1x3() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc15x1x4() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		t();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc15x2x3() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc15x2x4() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		t();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc15x3x3() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc15x3x4() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		t();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc15x4x3() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc15x4x4() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		t();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc15x5x3() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc15x5x4() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		t();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc15x6x3() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc15x6x4() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		t();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc15x7x3() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc15x7x4() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		t();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc15x8x3() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc15x8x4() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		t();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc15x9x3() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc15x9x4() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		t();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc15x10x3() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc15x10x4() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		t();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc15x11x3() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc15x11x4() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		t();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc15x12x3() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc15x12x4() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		t();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc15x13x3() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc15x13x4() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		t();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc15x14x3() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc15x14x4() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		t();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc15x15x3() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc15x15x4() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		t();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc15x16x3() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc15x16x4() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		t();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc15x17x3() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc15x17x4() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		t();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc15x18x3() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc15x18x4() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		t();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc15x19x3() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc15x19x4() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		t();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc15x20x3() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc15x20x4() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		t();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc15x21x3() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc15x21x4() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		t();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc15x22x3() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc15x22x4() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		t();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc15x23x3() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc15x23x4() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		t();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc15x24x3() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc15x24x4() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		t();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc15x25x3() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc15x25x4() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		t();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc15x26x3() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc15x26x4() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		t();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc15x27x3() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc15x27x4() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		t();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc15x28x3() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc15x28x4() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		t();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc15x29x3() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc15x29x4() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		t();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc15x30x3() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc15x30x4() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		t();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc15x31x3() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc15x31x4() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		t();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc16x0x0() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] == 0);
		Donate();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc16x0x1() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(msg.sender == owner);
		GetFunds();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc16x0x2() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc16x1x0() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] == 0);
		Donate();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc16x1x1() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(msg.sender == owner);
		GetFunds();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc16x1x2() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc16x2x0() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] == 0);
		Donate();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc16x2x1() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(msg.sender == owner);
		GetFunds();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc16x2x2() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc16x3x0() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] == 0);
		Donate();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc16x3x1() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(msg.sender == owner);
		GetFunds();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc16x3x2() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc16x4x0() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] == 0);
		Donate();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc16x4x1() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(msg.sender == owner);
		GetFunds();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc16x4x2() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc16x5x0() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] == 0);
		Donate();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc16x5x1() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(msg.sender == owner);
		GetFunds();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc16x5x2() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc16x6x0() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] == 0);
		Donate();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc16x6x1() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(msg.sender == owner);
		GetFunds();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc16x6x2() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc16x7x0() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] == 0);
		Donate();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc16x7x1() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(msg.sender == owner);
		GetFunds();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc16x7x2() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc16x8x0() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] == 0);
		Donate();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc16x8x1() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(msg.sender == owner);
		GetFunds();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc16x8x2() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc16x9x0() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] == 0);
		Donate();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc16x9x1() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(msg.sender == owner);
		GetFunds();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc16x9x2() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc16x10x0() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] == 0);
		Donate();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc16x10x1() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(msg.sender == owner);
		GetFunds();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc16x10x2() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc16x11x0() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] == 0);
		Donate();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc16x11x1() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(msg.sender == owner);
		GetFunds();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc16x11x2() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc16x12x0() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] == 0);
		Donate();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc16x12x1() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(msg.sender == owner);
		GetFunds();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc16x12x2() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc16x13x0() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] == 0);
		Donate();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc16x13x1() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(msg.sender == owner);
		GetFunds();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc16x13x2() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc16x14x0() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] == 0);
		Donate();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc16x14x1() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(msg.sender == owner);
		GetFunds();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc16x14x2() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc16x15x0() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] == 0);
		Donate();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc16x15x1() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(msg.sender == owner);
		GetFunds();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc16x15x2() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc16x16x0() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] == 0);
		Donate();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc16x16x1() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(msg.sender == owner);
		GetFunds();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc16x16x2() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc16x17x0() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] == 0);
		Donate();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc16x17x1() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(msg.sender == owner);
		GetFunds();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc16x17x2() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc16x18x0() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] == 0);
		Donate();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc16x18x1() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(msg.sender == owner);
		GetFunds();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc16x18x2() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc16x19x0() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] == 0);
		Donate();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc16x19x1() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(msg.sender == owner);
		GetFunds();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc16x19x2() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc16x20x0() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] == 0);
		Donate();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc16x20x1() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(msg.sender == owner);
		GetFunds();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc16x20x2() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc16x21x0() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] == 0);
		Donate();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc16x21x1() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(msg.sender == owner);
		GetFunds();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc16x21x2() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc16x22x0() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] == 0);
		Donate();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc16x22x1() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(msg.sender == owner);
		GetFunds();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc16x22x2() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc16x23x0() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] == 0);
		Donate();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc16x23x1() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(msg.sender == owner);
		GetFunds();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc16x23x2() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc16x24x0() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] == 0);
		Donate();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc16x24x1() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(msg.sender == owner);
		GetFunds();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc16x24x2() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc16x25x0() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] == 0);
		Donate();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc16x25x1() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(msg.sender == owner);
		GetFunds();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc16x25x2() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc16x26x0() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] == 0);
		Donate();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc16x26x1() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(msg.sender == owner);
		GetFunds();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc16x26x2() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc16x27x0() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] == 0);
		Donate();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc16x27x1() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(msg.sender == owner);
		GetFunds();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc16x27x2() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc16x28x0() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] == 0);
		Donate();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc16x28x1() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(msg.sender == owner);
		GetFunds();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc16x28x2() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc16x29x0() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] == 0);
		Donate();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc16x29x1() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(msg.sender == owner);
		GetFunds();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc16x29x2() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc16x30x0() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] == 0);
		Donate();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc16x30x1() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(msg.sender == owner);
		GetFunds();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc16x30x2() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc16x31x0() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] == 0);
		Donate();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc16x31x1() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(msg.sender == owner);
		GetFunds();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc16x31x2() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc17x0x0() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] == 0);
		Donate();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc17x0x1() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(msg.sender == owner);
		GetFunds();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc17x0x3() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc17x1x0() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] == 0);
		Donate();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc17x1x1() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(msg.sender == owner);
		GetFunds();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc17x1x3() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc17x2x0() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] == 0);
		Donate();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc17x2x1() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(msg.sender == owner);
		GetFunds();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc17x2x3() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc17x3x0() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] == 0);
		Donate();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc17x3x1() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(msg.sender == owner);
		GetFunds();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc17x3x3() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc17x4x0() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] == 0);
		Donate();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc17x4x1() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(msg.sender == owner);
		GetFunds();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc17x4x3() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc17x5x0() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] == 0);
		Donate();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc17x5x1() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(msg.sender == owner);
		GetFunds();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc17x5x3() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc17x6x0() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] == 0);
		Donate();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc17x6x1() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(msg.sender == owner);
		GetFunds();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc17x6x3() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc17x7x0() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] == 0);
		Donate();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc17x7x1() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(msg.sender == owner);
		GetFunds();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc17x7x3() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc17x8x0() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] == 0);
		Donate();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc17x8x1() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(msg.sender == owner);
		GetFunds();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc17x8x3() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc17x9x0() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] == 0);
		Donate();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc17x9x1() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(msg.sender == owner);
		GetFunds();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc17x9x3() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc17x10x0() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] == 0);
		Donate();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc17x10x1() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(msg.sender == owner);
		GetFunds();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc17x10x3() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc17x11x0() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] == 0);
		Donate();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc17x11x1() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(msg.sender == owner);
		GetFunds();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc17x11x3() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc17x12x0() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] == 0);
		Donate();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc17x12x1() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(msg.sender == owner);
		GetFunds();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc17x12x3() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc17x13x0() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] == 0);
		Donate();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc17x13x1() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(msg.sender == owner);
		GetFunds();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc17x13x3() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc17x14x0() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] == 0);
		Donate();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc17x14x1() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(msg.sender == owner);
		GetFunds();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc17x14x3() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc17x15x0() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] == 0);
		Donate();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc17x15x1() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(msg.sender == owner);
		GetFunds();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc17x15x3() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc17x16x0() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] == 0);
		Donate();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc17x16x1() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(msg.sender == owner);
		GetFunds();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc17x16x3() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc17x17x0() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] == 0);
		Donate();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc17x17x1() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(msg.sender == owner);
		GetFunds();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc17x17x3() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc17x18x0() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] == 0);
		Donate();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc17x18x1() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(msg.sender == owner);
		GetFunds();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc17x18x3() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc17x19x0() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] == 0);
		Donate();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc17x19x1() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(msg.sender == owner);
		GetFunds();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc17x19x3() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc17x20x0() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] == 0);
		Donate();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc17x20x1() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(msg.sender == owner);
		GetFunds();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc17x20x3() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc17x21x0() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] == 0);
		Donate();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc17x21x1() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(msg.sender == owner);
		GetFunds();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc17x21x3() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc17x22x0() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] == 0);
		Donate();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc17x22x1() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(msg.sender == owner);
		GetFunds();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc17x22x3() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc17x23x0() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] == 0);
		Donate();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc17x23x1() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(msg.sender == owner);
		GetFunds();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc17x23x3() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc17x24x0() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] == 0);
		Donate();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc17x24x1() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(msg.sender == owner);
		GetFunds();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc17x24x3() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc17x25x0() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] == 0);
		Donate();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc17x25x1() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(msg.sender == owner);
		GetFunds();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc17x25x3() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc17x26x0() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] == 0);
		Donate();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc17x26x1() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(msg.sender == owner);
		GetFunds();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc17x26x3() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc17x27x0() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] == 0);
		Donate();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc17x27x1() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(msg.sender == owner);
		GetFunds();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc17x27x3() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc17x28x0() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] == 0);
		Donate();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc17x28x1() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(msg.sender == owner);
		GetFunds();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc17x28x3() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc17x29x0() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] == 0);
		Donate();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc17x29x1() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(msg.sender == owner);
		GetFunds();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc17x29x3() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc17x30x0() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] == 0);
		Donate();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc17x30x1() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(msg.sender == owner);
		GetFunds();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc17x30x3() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc17x31x0() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] == 0);
		Donate();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc17x31x1() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(msg.sender == owner);
		GetFunds();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc17x31x3() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc18x0x0() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(backers[msg.sender] == 0);
		Donate();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc18x0x1() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(msg.sender == owner);
		GetFunds();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc18x0x4() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		t();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc18x1x0() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(backers[msg.sender] == 0);
		Donate();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc18x1x1() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(msg.sender == owner);
		GetFunds();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc18x1x4() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		t();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc18x2x0() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(backers[msg.sender] == 0);
		Donate();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc18x2x1() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(msg.sender == owner);
		GetFunds();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc18x2x4() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		t();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc18x3x0() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(backers[msg.sender] == 0);
		Donate();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc18x3x1() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(msg.sender == owner);
		GetFunds();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc18x3x4() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		t();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc18x4x0() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(backers[msg.sender] == 0);
		Donate();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc18x4x1() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(msg.sender == owner);
		GetFunds();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc18x4x4() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		t();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc18x5x0() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(backers[msg.sender] == 0);
		Donate();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc18x5x1() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(msg.sender == owner);
		GetFunds();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc18x5x4() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		t();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc18x6x0() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(backers[msg.sender] == 0);
		Donate();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc18x6x1() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(msg.sender == owner);
		GetFunds();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc18x6x4() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		t();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc18x7x0() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(backers[msg.sender] == 0);
		Donate();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc18x7x1() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(msg.sender == owner);
		GetFunds();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc18x7x4() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		t();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc18x8x0() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(backers[msg.sender] == 0);
		Donate();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc18x8x1() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(msg.sender == owner);
		GetFunds();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc18x8x4() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		t();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc18x9x0() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(backers[msg.sender] == 0);
		Donate();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc18x9x1() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(msg.sender == owner);
		GetFunds();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc18x9x4() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		t();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc18x10x0() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(backers[msg.sender] == 0);
		Donate();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc18x10x1() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(msg.sender == owner);
		GetFunds();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc18x10x4() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		t();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc18x11x0() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(backers[msg.sender] == 0);
		Donate();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc18x11x1() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(msg.sender == owner);
		GetFunds();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc18x11x4() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		t();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc18x12x0() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(backers[msg.sender] == 0);
		Donate();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc18x12x1() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(msg.sender == owner);
		GetFunds();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc18x12x4() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		t();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc18x13x0() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(backers[msg.sender] == 0);
		Donate();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc18x13x1() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(msg.sender == owner);
		GetFunds();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc18x13x4() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		t();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc18x14x0() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(backers[msg.sender] == 0);
		Donate();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc18x14x1() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(msg.sender == owner);
		GetFunds();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc18x14x4() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		t();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc18x15x0() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(backers[msg.sender] == 0);
		Donate();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc18x15x1() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(msg.sender == owner);
		GetFunds();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc18x15x4() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		t();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc18x16x0() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(backers[msg.sender] == 0);
		Donate();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc18x16x1() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(msg.sender == owner);
		GetFunds();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc18x16x4() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		t();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc18x17x0() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(backers[msg.sender] == 0);
		Donate();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc18x17x1() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(msg.sender == owner);
		GetFunds();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc18x17x4() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		t();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc18x18x0() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(backers[msg.sender] == 0);
		Donate();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc18x18x1() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(msg.sender == owner);
		GetFunds();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc18x18x4() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		t();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc18x19x0() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(backers[msg.sender] == 0);
		Donate();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc18x19x1() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(msg.sender == owner);
		GetFunds();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc18x19x4() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		t();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc18x20x0() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(backers[msg.sender] == 0);
		Donate();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc18x20x1() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(msg.sender == owner);
		GetFunds();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc18x20x4() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		t();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc18x21x0() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(backers[msg.sender] == 0);
		Donate();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc18x21x1() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(msg.sender == owner);
		GetFunds();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc18x21x4() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		t();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc18x22x0() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(backers[msg.sender] == 0);
		Donate();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc18x22x1() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(msg.sender == owner);
		GetFunds();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc18x22x4() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		t();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc18x23x0() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(backers[msg.sender] == 0);
		Donate();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc18x23x1() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(msg.sender == owner);
		GetFunds();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc18x23x4() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		t();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc18x24x0() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(backers[msg.sender] == 0);
		Donate();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc18x24x1() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(msg.sender == owner);
		GetFunds();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc18x24x4() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		t();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc18x25x0() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(backers[msg.sender] == 0);
		Donate();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc18x25x1() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(msg.sender == owner);
		GetFunds();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc18x25x4() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		t();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc18x26x0() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(backers[msg.sender] == 0);
		Donate();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc18x26x1() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(msg.sender == owner);
		GetFunds();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc18x26x4() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		t();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc18x27x0() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(backers[msg.sender] == 0);
		Donate();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc18x27x1() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(msg.sender == owner);
		GetFunds();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc18x27x4() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		t();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc18x28x0() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(backers[msg.sender] == 0);
		Donate();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc18x28x1() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(msg.sender == owner);
		GetFunds();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc18x28x4() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		t();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc18x29x0() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(backers[msg.sender] == 0);
		Donate();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc18x29x1() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(msg.sender == owner);
		GetFunds();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc18x29x4() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		t();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc18x30x0() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(backers[msg.sender] == 0);
		Donate();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc18x30x1() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(msg.sender == owner);
		GetFunds();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc18x30x4() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		t();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc18x31x0() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(backers[msg.sender] == 0);
		Donate();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc18x31x1() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(msg.sender == owner);
		GetFunds();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc18x31x4() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		t();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc19x0x0() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] == 0);
		Donate();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc19x0x2() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc19x0x3() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc19x1x0() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] == 0);
		Donate();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc19x1x2() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc19x1x3() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc19x2x0() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] == 0);
		Donate();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc19x2x2() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc19x2x3() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc19x3x0() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] == 0);
		Donate();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc19x3x2() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc19x3x3() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc19x4x0() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] == 0);
		Donate();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc19x4x2() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc19x4x3() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc19x5x0() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] == 0);
		Donate();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc19x5x2() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc19x5x3() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc19x6x0() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] == 0);
		Donate();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc19x6x2() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc19x6x3() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc19x7x0() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] == 0);
		Donate();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc19x7x2() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc19x7x3() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc19x8x0() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] == 0);
		Donate();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc19x8x2() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc19x8x3() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc19x9x0() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] == 0);
		Donate();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc19x9x2() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc19x9x3() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc19x10x0() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] == 0);
		Donate();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc19x10x2() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc19x10x3() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc19x11x0() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] == 0);
		Donate();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc19x11x2() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc19x11x3() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc19x12x0() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] == 0);
		Donate();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc19x12x2() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc19x12x3() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc19x13x0() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] == 0);
		Donate();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc19x13x2() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc19x13x3() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc19x14x0() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] == 0);
		Donate();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc19x14x2() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc19x14x3() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc19x15x0() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] == 0);
		Donate();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc19x15x2() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc19x15x3() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc19x16x0() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] == 0);
		Donate();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc19x16x2() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc19x16x3() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc19x17x0() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] == 0);
		Donate();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc19x17x2() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc19x17x3() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc19x18x0() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] == 0);
		Donate();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc19x18x2() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc19x18x3() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc19x19x0() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] == 0);
		Donate();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc19x19x2() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc19x19x3() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc19x20x0() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] == 0);
		Donate();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc19x20x2() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc19x20x3() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc19x21x0() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] == 0);
		Donate();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc19x21x2() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc19x21x3() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc19x22x0() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] == 0);
		Donate();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc19x22x2() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc19x22x3() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc19x23x0() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] == 0);
		Donate();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc19x23x2() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc19x23x3() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc19x24x0() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] == 0);
		Donate();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc19x24x2() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc19x24x3() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc19x25x0() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] == 0);
		Donate();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc19x25x2() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc19x25x3() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc19x26x0() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] == 0);
		Donate();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc19x26x2() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc19x26x3() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc19x27x0() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] == 0);
		Donate();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc19x27x2() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc19x27x3() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc19x28x0() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] == 0);
		Donate();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc19x28x2() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc19x28x3() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc19x29x0() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] == 0);
		Donate();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc19x29x2() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc19x29x3() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc19x30x0() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] == 0);
		Donate();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc19x30x2() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc19x30x3() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc19x31x0() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] == 0);
		Donate();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc19x31x2() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc19x31x3() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc20x0x0() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(backers[msg.sender] == 0);
		Donate();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc20x0x2() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc20x0x4() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		t();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc20x1x0() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(backers[msg.sender] == 0);
		Donate();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc20x1x2() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc20x1x4() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		t();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc20x2x0() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(backers[msg.sender] == 0);
		Donate();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc20x2x2() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc20x2x4() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		t();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc20x3x0() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(backers[msg.sender] == 0);
		Donate();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc20x3x2() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc20x3x4() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		t();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc20x4x0() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(backers[msg.sender] == 0);
		Donate();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc20x4x2() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc20x4x4() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		t();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc20x5x0() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(backers[msg.sender] == 0);
		Donate();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc20x5x2() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc20x5x4() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		t();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc20x6x0() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(backers[msg.sender] == 0);
		Donate();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc20x6x2() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc20x6x4() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		t();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc20x7x0() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(backers[msg.sender] == 0);
		Donate();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc20x7x2() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc20x7x4() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		t();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc20x8x0() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(backers[msg.sender] == 0);
		Donate();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc20x8x2() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc20x8x4() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		t();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc20x9x0() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(backers[msg.sender] == 0);
		Donate();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc20x9x2() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc20x9x4() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		t();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc20x10x0() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(backers[msg.sender] == 0);
		Donate();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc20x10x2() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc20x10x4() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		t();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc20x11x0() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(backers[msg.sender] == 0);
		Donate();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc20x11x2() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc20x11x4() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		t();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc20x12x0() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(backers[msg.sender] == 0);
		Donate();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc20x12x2() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc20x12x4() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		t();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc20x13x0() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(backers[msg.sender] == 0);
		Donate();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc20x13x2() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc20x13x4() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		t();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc20x14x0() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(backers[msg.sender] == 0);
		Donate();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc20x14x2() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc20x14x4() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		t();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc20x15x0() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(backers[msg.sender] == 0);
		Donate();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc20x15x2() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc20x15x4() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		t();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc20x16x0() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(backers[msg.sender] == 0);
		Donate();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc20x16x2() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc20x16x4() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		t();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc20x17x0() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(backers[msg.sender] == 0);
		Donate();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc20x17x2() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc20x17x4() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		t();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc20x18x0() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(backers[msg.sender] == 0);
		Donate();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc20x18x2() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc20x18x4() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		t();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc20x19x0() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(backers[msg.sender] == 0);
		Donate();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc20x19x2() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc20x19x4() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		t();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc20x20x0() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(backers[msg.sender] == 0);
		Donate();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc20x20x2() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc20x20x4() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		t();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc20x21x0() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(backers[msg.sender] == 0);
		Donate();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc20x21x2() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc20x21x4() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		t();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc20x22x0() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(backers[msg.sender] == 0);
		Donate();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc20x22x2() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc20x22x4() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		t();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc20x23x0() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(backers[msg.sender] == 0);
		Donate();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc20x23x2() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc20x23x4() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		t();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc20x24x0() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(backers[msg.sender] == 0);
		Donate();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc20x24x2() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc20x24x4() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		t();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc20x25x0() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(backers[msg.sender] == 0);
		Donate();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc20x25x2() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc20x25x4() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		t();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc20x26x0() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(backers[msg.sender] == 0);
		Donate();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc20x26x2() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc20x26x4() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		t();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc20x27x0() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(backers[msg.sender] == 0);
		Donate();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc20x27x2() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc20x27x4() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		t();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc20x28x0() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(backers[msg.sender] == 0);
		Donate();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc20x28x2() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc20x28x4() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		t();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc20x29x0() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(backers[msg.sender] == 0);
		Donate();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc20x29x2() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc20x29x4() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		t();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc20x30x0() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(backers[msg.sender] == 0);
		Donate();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc20x30x2() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc20x30x4() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		t();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc20x31x0() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(backers[msg.sender] == 0);
		Donate();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc20x31x2() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc20x31x4() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		t();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc21x0x0() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(backers[msg.sender] == 0);
		Donate();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc21x0x3() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc21x0x4() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		t();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc21x1x0() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(backers[msg.sender] == 0);
		Donate();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc21x1x3() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc21x1x4() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		t();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc21x2x0() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(backers[msg.sender] == 0);
		Donate();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc21x2x3() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc21x2x4() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		t();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc21x3x0() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(backers[msg.sender] == 0);
		Donate();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc21x3x3() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc21x3x4() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		t();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc21x4x0() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(backers[msg.sender] == 0);
		Donate();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc21x4x3() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc21x4x4() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		t();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc21x5x0() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(backers[msg.sender] == 0);
		Donate();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc21x5x3() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc21x5x4() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		t();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc21x6x0() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(backers[msg.sender] == 0);
		Donate();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc21x6x3() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc21x6x4() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		t();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc21x7x0() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(backers[msg.sender] == 0);
		Donate();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc21x7x3() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc21x7x4() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		t();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc21x8x0() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(backers[msg.sender] == 0);
		Donate();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc21x8x3() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc21x8x4() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		t();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc21x9x0() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(backers[msg.sender] == 0);
		Donate();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc21x9x3() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc21x9x4() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		t();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc21x10x0() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(backers[msg.sender] == 0);
		Donate();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc21x10x3() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc21x10x4() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		t();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc21x11x0() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(backers[msg.sender] == 0);
		Donate();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc21x11x3() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc21x11x4() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		t();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc21x12x0() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(backers[msg.sender] == 0);
		Donate();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc21x12x3() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc21x12x4() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		t();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc21x13x0() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(backers[msg.sender] == 0);
		Donate();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc21x13x3() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc21x13x4() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		t();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc21x14x0() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(backers[msg.sender] == 0);
		Donate();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc21x14x3() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc21x14x4() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		t();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc21x15x0() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(backers[msg.sender] == 0);
		Donate();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc21x15x3() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc21x15x4() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		t();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc21x16x0() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(backers[msg.sender] == 0);
		Donate();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc21x16x3() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc21x16x4() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		t();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc21x17x0() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(backers[msg.sender] == 0);
		Donate();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc21x17x3() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc21x17x4() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		t();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc21x18x0() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(backers[msg.sender] == 0);
		Donate();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc21x18x3() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc21x18x4() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		t();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc21x19x0() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(backers[msg.sender] == 0);
		Donate();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc21x19x3() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc21x19x4() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		t();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc21x20x0() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(backers[msg.sender] == 0);
		Donate();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc21x20x3() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc21x20x4() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		t();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc21x21x0() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(backers[msg.sender] == 0);
		Donate();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc21x21x3() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc21x21x4() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		t();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc21x22x0() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(backers[msg.sender] == 0);
		Donate();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc21x22x3() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc21x22x4() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		t();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc21x23x0() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(backers[msg.sender] == 0);
		Donate();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc21x23x3() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc21x23x4() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		t();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc21x24x0() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(backers[msg.sender] == 0);
		Donate();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc21x24x3() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc21x24x4() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		t();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc21x25x0() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(backers[msg.sender] == 0);
		Donate();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc21x25x3() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc21x25x4() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		t();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc21x26x0() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(backers[msg.sender] == 0);
		Donate();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc21x26x3() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc21x26x4() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		t();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc21x27x0() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(backers[msg.sender] == 0);
		Donate();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc21x27x3() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc21x27x4() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		t();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc21x28x0() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(backers[msg.sender] == 0);
		Donate();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc21x28x3() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc21x28x4() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		t();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc21x29x0() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(backers[msg.sender] == 0);
		Donate();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc21x29x3() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc21x29x4() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		t();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc21x30x0() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(backers[msg.sender] == 0);
		Donate();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc21x30x3() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc21x30x4() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		t();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc21x31x0() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(backers[msg.sender] == 0);
		Donate();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc21x31x3() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc21x31x4() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		t();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc22x0x1() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(msg.sender == owner);
		GetFunds();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc22x0x2() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc22x0x3() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc22x1x1() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(msg.sender == owner);
		GetFunds();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc22x1x2() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc22x1x3() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc22x2x1() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(msg.sender == owner);
		GetFunds();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc22x2x2() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc22x2x3() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc22x3x1() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(msg.sender == owner);
		GetFunds();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc22x3x2() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc22x3x3() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc22x4x1() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(msg.sender == owner);
		GetFunds();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc22x4x2() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc22x4x3() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc22x5x1() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(msg.sender == owner);
		GetFunds();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc22x5x2() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc22x5x3() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc22x6x1() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(msg.sender == owner);
		GetFunds();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc22x6x2() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc22x6x3() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc22x7x1() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(msg.sender == owner);
		GetFunds();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc22x7x2() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc22x7x3() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc22x8x1() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(msg.sender == owner);
		GetFunds();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc22x8x2() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc22x8x3() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc22x9x1() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(msg.sender == owner);
		GetFunds();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc22x9x2() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc22x9x3() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc22x10x1() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(msg.sender == owner);
		GetFunds();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc22x10x2() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc22x10x3() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc22x11x1() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(msg.sender == owner);
		GetFunds();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc22x11x2() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc22x11x3() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc22x12x1() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(msg.sender == owner);
		GetFunds();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc22x12x2() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc22x12x3() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc22x13x1() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(msg.sender == owner);
		GetFunds();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc22x13x2() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc22x13x3() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc22x14x1() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(msg.sender == owner);
		GetFunds();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc22x14x2() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc22x14x3() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc22x15x1() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(msg.sender == owner);
		GetFunds();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc22x15x2() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc22x15x3() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc22x16x1() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(msg.sender == owner);
		GetFunds();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc22x16x2() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc22x16x3() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc22x17x1() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(msg.sender == owner);
		GetFunds();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc22x17x2() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc22x17x3() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc22x18x1() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(msg.sender == owner);
		GetFunds();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc22x18x2() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc22x18x3() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc22x19x1() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(msg.sender == owner);
		GetFunds();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc22x19x2() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc22x19x3() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc22x20x1() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(msg.sender == owner);
		GetFunds();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc22x20x2() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc22x20x3() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc22x21x1() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(msg.sender == owner);
		GetFunds();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc22x21x2() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc22x21x3() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc22x22x1() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(msg.sender == owner);
		GetFunds();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc22x22x2() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc22x22x3() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc22x23x1() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(msg.sender == owner);
		GetFunds();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc22x23x2() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc22x23x3() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc22x24x1() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(msg.sender == owner);
		GetFunds();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc22x24x2() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc22x24x3() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc22x25x1() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(msg.sender == owner);
		GetFunds();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc22x25x2() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc22x25x3() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc22x26x1() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(msg.sender == owner);
		GetFunds();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc22x26x2() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc22x26x3() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc22x27x1() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(msg.sender == owner);
		GetFunds();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc22x27x2() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc22x27x3() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc22x28x1() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(msg.sender == owner);
		GetFunds();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc22x28x2() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc22x28x3() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc22x29x1() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(msg.sender == owner);
		GetFunds();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc22x29x2() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc22x29x3() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc22x30x1() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(msg.sender == owner);
		GetFunds();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc22x30x2() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc22x30x3() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc22x31x1() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(msg.sender == owner);
		GetFunds();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc22x31x2() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc22x31x3() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc23x0x1() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(msg.sender == owner);
		GetFunds();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc23x0x2() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc23x0x4() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		t();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc23x1x1() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(msg.sender == owner);
		GetFunds();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc23x1x2() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc23x1x4() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		t();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc23x2x1() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(msg.sender == owner);
		GetFunds();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc23x2x2() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc23x2x4() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		t();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc23x3x1() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(msg.sender == owner);
		GetFunds();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc23x3x2() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc23x3x4() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		t();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc23x4x1() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(msg.sender == owner);
		GetFunds();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc23x4x2() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc23x4x4() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		t();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc23x5x1() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(msg.sender == owner);
		GetFunds();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc23x5x2() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc23x5x4() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		t();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc23x6x1() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(msg.sender == owner);
		GetFunds();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc23x6x2() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc23x6x4() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		t();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc23x7x1() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(msg.sender == owner);
		GetFunds();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc23x7x2() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc23x7x4() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		t();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc23x8x1() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(msg.sender == owner);
		GetFunds();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc23x8x2() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc23x8x4() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		t();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc23x9x1() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(msg.sender == owner);
		GetFunds();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc23x9x2() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc23x9x4() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		t();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc23x10x1() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(msg.sender == owner);
		GetFunds();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc23x10x2() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc23x10x4() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		t();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc23x11x1() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(msg.sender == owner);
		GetFunds();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc23x11x2() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc23x11x4() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		t();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc23x12x1() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(msg.sender == owner);
		GetFunds();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc23x12x2() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc23x12x4() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		t();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc23x13x1() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(msg.sender == owner);
		GetFunds();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc23x13x2() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc23x13x4() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		t();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc23x14x1() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(msg.sender == owner);
		GetFunds();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc23x14x2() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc23x14x4() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		t();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc23x15x1() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(msg.sender == owner);
		GetFunds();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc23x15x2() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc23x15x4() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		t();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc23x16x1() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(msg.sender == owner);
		GetFunds();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc23x16x2() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc23x16x4() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		t();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc23x17x1() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(msg.sender == owner);
		GetFunds();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc23x17x2() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc23x17x4() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		t();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc23x18x1() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(msg.sender == owner);
		GetFunds();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc23x18x2() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc23x18x4() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		t();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc23x19x1() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(msg.sender == owner);
		GetFunds();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc23x19x2() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc23x19x4() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		t();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc23x20x1() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(msg.sender == owner);
		GetFunds();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc23x20x2() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc23x20x4() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		t();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc23x21x1() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(msg.sender == owner);
		GetFunds();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc23x21x2() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc23x21x4() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		t();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc23x22x1() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(msg.sender == owner);
		GetFunds();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc23x22x2() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc23x22x4() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		t();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc23x23x1() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(msg.sender == owner);
		GetFunds();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc23x23x2() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc23x23x4() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		t();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc23x24x1() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(msg.sender == owner);
		GetFunds();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc23x24x2() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc23x24x4() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		t();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc23x25x1() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(msg.sender == owner);
		GetFunds();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc23x25x2() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc23x25x4() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		t();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc23x26x1() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(msg.sender == owner);
		GetFunds();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc23x26x2() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc23x26x4() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		t();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc23x27x1() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(msg.sender == owner);
		GetFunds();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc23x27x2() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc23x27x4() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		t();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc23x28x1() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(msg.sender == owner);
		GetFunds();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc23x28x2() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc23x28x4() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		t();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc23x29x1() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(msg.sender == owner);
		GetFunds();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc23x29x2() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc23x29x4() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		t();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc23x30x1() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(msg.sender == owner);
		GetFunds();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc23x30x2() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc23x30x4() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		t();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc23x31x1() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(msg.sender == owner);
		GetFunds();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc23x31x2() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc23x31x4() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		t();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc24x0x1() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(msg.sender == owner);
		GetFunds();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc24x0x3() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc24x0x4() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		t();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc24x1x1() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(msg.sender == owner);
		GetFunds();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc24x1x3() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc24x1x4() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		t();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc24x2x1() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(msg.sender == owner);
		GetFunds();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc24x2x3() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc24x2x4() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		t();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc24x3x1() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(msg.sender == owner);
		GetFunds();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc24x3x3() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc24x3x4() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		t();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc24x4x1() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(msg.sender == owner);
		GetFunds();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc24x4x3() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc24x4x4() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		t();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc24x5x1() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(msg.sender == owner);
		GetFunds();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc24x5x3() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc24x5x4() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		t();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc24x6x1() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(msg.sender == owner);
		GetFunds();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc24x6x3() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc24x6x4() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		t();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc24x7x1() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(msg.sender == owner);
		GetFunds();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc24x7x3() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc24x7x4() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		t();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc24x8x1() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(msg.sender == owner);
		GetFunds();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc24x8x3() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc24x8x4() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		t();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc24x9x1() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(msg.sender == owner);
		GetFunds();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc24x9x3() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc24x9x4() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		t();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc24x10x1() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(msg.sender == owner);
		GetFunds();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc24x10x3() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc24x10x4() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		t();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc24x11x1() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(msg.sender == owner);
		GetFunds();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc24x11x3() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc24x11x4() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		t();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc24x12x1() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(msg.sender == owner);
		GetFunds();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc24x12x3() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc24x12x4() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		t();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc24x13x1() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(msg.sender == owner);
		GetFunds();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc24x13x3() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc24x13x4() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		t();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc24x14x1() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(msg.sender == owner);
		GetFunds();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc24x14x3() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc24x14x4() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		t();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc24x15x1() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(msg.sender == owner);
		GetFunds();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc24x15x3() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc24x15x4() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		t();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc24x16x1() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(msg.sender == owner);
		GetFunds();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc24x16x3() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc24x16x4() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		t();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc24x17x1() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(msg.sender == owner);
		GetFunds();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc24x17x3() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc24x17x4() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		t();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc24x18x1() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(msg.sender == owner);
		GetFunds();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc24x18x3() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc24x18x4() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		t();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc24x19x1() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(msg.sender == owner);
		GetFunds();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc24x19x3() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc24x19x4() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		t();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc24x20x1() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(msg.sender == owner);
		GetFunds();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc24x20x3() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc24x20x4() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		t();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc24x21x1() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(msg.sender == owner);
		GetFunds();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc24x21x3() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc24x21x4() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		t();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc24x22x1() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(msg.sender == owner);
		GetFunds();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc24x22x3() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc24x22x4() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		t();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc24x23x1() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(msg.sender == owner);
		GetFunds();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc24x23x3() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc24x23x4() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		t();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc24x24x1() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(msg.sender == owner);
		GetFunds();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc24x24x3() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc24x24x4() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		t();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc24x25x1() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(msg.sender == owner);
		GetFunds();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc24x25x3() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc24x25x4() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		t();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc24x26x1() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(msg.sender == owner);
		GetFunds();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc24x26x3() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc24x26x4() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		t();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc24x27x1() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(msg.sender == owner);
		GetFunds();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc24x27x3() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc24x27x4() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		t();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc24x28x1() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(msg.sender == owner);
		GetFunds();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc24x28x3() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc24x28x4() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		t();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc24x29x1() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(msg.sender == owner);
		GetFunds();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc24x29x3() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc24x29x4() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		t();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc24x30x1() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(msg.sender == owner);
		GetFunds();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc24x30x3() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc24x30x4() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		t();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc24x31x1() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(msg.sender == owner);
		GetFunds();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc24x31x3() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc24x31x4() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		t();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc25x0x2() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc25x0x3() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc25x0x4() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		t();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc25x1x2() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc25x1x3() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc25x1x4() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		t();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc25x2x2() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc25x2x3() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc25x2x4() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		t();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc25x3x2() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc25x3x3() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc25x3x4() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		t();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc25x4x2() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc25x4x3() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc25x4x4() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		t();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc25x5x2() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc25x5x3() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc25x5x4() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		t();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc25x6x2() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc25x6x3() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc25x6x4() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		t();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc25x7x2() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc25x7x3() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc25x7x4() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		t();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc25x8x2() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc25x8x3() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc25x8x4() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		t();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc25x9x2() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc25x9x3() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc25x9x4() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		t();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc25x10x2() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc25x10x3() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc25x10x4() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		t();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc25x11x2() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc25x11x3() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc25x11x4() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		t();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc25x12x2() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc25x12x3() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc25x12x4() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		t();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc25x13x2() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc25x13x3() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc25x13x4() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		t();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc25x14x2() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc25x14x3() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc25x14x4() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		t();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc25x15x2() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc25x15x3() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc25x15x4() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		t();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc25x16x2() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc25x16x3() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc25x16x4() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		t();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc25x17x2() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc25x17x3() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc25x17x4() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		t();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc25x18x2() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc25x18x3() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc25x18x4() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		t();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc25x19x2() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc25x19x3() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc25x19x4() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		t();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc25x20x2() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc25x20x3() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc25x20x4() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		t();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc25x21x2() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc25x21x3() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc25x21x4() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		t();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc25x22x2() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc25x22x3() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc25x22x4() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		t();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc25x23x2() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc25x23x3() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc25x23x4() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		t();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc25x24x2() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc25x24x3() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc25x24x4() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		t();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc25x25x2() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc25x25x3() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc25x25x4() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		t();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc25x26x2() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc25x26x3() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc25x26x4() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		t();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc25x27x2() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc25x27x3() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc25x27x4() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		t();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc25x28x2() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc25x28x3() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc25x28x4() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		t();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc25x29x2() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc25x29x3() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc25x29x4() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		t();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc25x30x2() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc25x30x3() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc25x30x4() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		t();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc25x31x2() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc25x31x3() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc25x31x4() hasInitialized payable public {
		require(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		t();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc26x0x0() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] == 0);
		Donate();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc26x0x1() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(msg.sender == owner);
		GetFunds();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc26x0x2() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc26x0x3() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc26x1x0() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] == 0);
		Donate();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc26x1x1() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(msg.sender == owner);
		GetFunds();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc26x1x2() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc26x1x3() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc26x2x0() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] == 0);
		Donate();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc26x2x1() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(msg.sender == owner);
		GetFunds();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc26x2x2() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc26x2x3() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc26x3x0() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] == 0);
		Donate();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc26x3x1() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(msg.sender == owner);
		GetFunds();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc26x3x2() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc26x3x3() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc26x4x0() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] == 0);
		Donate();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc26x4x1() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(msg.sender == owner);
		GetFunds();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc26x4x2() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc26x4x3() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc26x5x0() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] == 0);
		Donate();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc26x5x1() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(msg.sender == owner);
		GetFunds();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc26x5x2() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc26x5x3() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc26x6x0() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] == 0);
		Donate();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc26x6x1() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(msg.sender == owner);
		GetFunds();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc26x6x2() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc26x6x3() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc26x7x0() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] == 0);
		Donate();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc26x7x1() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(msg.sender == owner);
		GetFunds();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc26x7x2() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc26x7x3() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc26x8x0() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] == 0);
		Donate();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc26x8x1() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(msg.sender == owner);
		GetFunds();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc26x8x2() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc26x8x3() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc26x9x0() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] == 0);
		Donate();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc26x9x1() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(msg.sender == owner);
		GetFunds();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc26x9x2() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc26x9x3() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc26x10x0() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] == 0);
		Donate();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc26x10x1() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(msg.sender == owner);
		GetFunds();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc26x10x2() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc26x10x3() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc26x11x0() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] == 0);
		Donate();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc26x11x1() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(msg.sender == owner);
		GetFunds();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc26x11x2() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc26x11x3() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc26x12x0() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] == 0);
		Donate();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc26x12x1() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(msg.sender == owner);
		GetFunds();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc26x12x2() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc26x12x3() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc26x13x0() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] == 0);
		Donate();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc26x13x1() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(msg.sender == owner);
		GetFunds();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc26x13x2() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc26x13x3() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc26x14x0() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] == 0);
		Donate();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc26x14x1() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(msg.sender == owner);
		GetFunds();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc26x14x2() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc26x14x3() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc26x15x0() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] == 0);
		Donate();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc26x15x1() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(msg.sender == owner);
		GetFunds();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc26x15x2() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc26x15x3() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc26x16x0() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] == 0);
		Donate();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc26x16x1() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(msg.sender == owner);
		GetFunds();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc26x16x2() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc26x16x3() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc26x17x0() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] == 0);
		Donate();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc26x17x1() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(msg.sender == owner);
		GetFunds();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc26x17x2() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc26x17x3() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc26x18x0() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] == 0);
		Donate();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc26x18x1() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(msg.sender == owner);
		GetFunds();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc26x18x2() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc26x18x3() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc26x19x0() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] == 0);
		Donate();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc26x19x1() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(msg.sender == owner);
		GetFunds();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc26x19x2() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc26x19x3() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc26x20x0() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] == 0);
		Donate();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc26x20x1() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(msg.sender == owner);
		GetFunds();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc26x20x2() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc26x20x3() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc26x21x0() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] == 0);
		Donate();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc26x21x1() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(msg.sender == owner);
		GetFunds();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc26x21x2() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc26x21x3() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc26x22x0() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] == 0);
		Donate();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc26x22x1() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(msg.sender == owner);
		GetFunds();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc26x22x2() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc26x22x3() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc26x23x0() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] == 0);
		Donate();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc26x23x1() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(msg.sender == owner);
		GetFunds();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc26x23x2() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc26x23x3() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc26x24x0() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] == 0);
		Donate();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc26x24x1() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(msg.sender == owner);
		GetFunds();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc26x24x2() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc26x24x3() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc26x25x0() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] == 0);
		Donate();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc26x25x1() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(msg.sender == owner);
		GetFunds();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc26x25x2() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc26x25x3() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc26x26x0() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] == 0);
		Donate();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc26x26x1() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(msg.sender == owner);
		GetFunds();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc26x26x2() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc26x26x3() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc26x27x0() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] == 0);
		Donate();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc26x27x1() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(msg.sender == owner);
		GetFunds();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc26x27x2() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc26x27x3() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc26x28x0() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] == 0);
		Donate();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc26x28x1() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(msg.sender == owner);
		GetFunds();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc26x28x2() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc26x28x3() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc26x29x0() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] == 0);
		Donate();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc26x29x1() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(msg.sender == owner);
		GetFunds();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc26x29x2() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc26x29x3() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc26x30x0() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] == 0);
		Donate();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc26x30x1() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(msg.sender == owner);
		GetFunds();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc26x30x2() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc26x30x3() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc26x31x0() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] == 0);
		Donate();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc26x31x1() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(msg.sender == owner);
		GetFunds();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc26x31x2() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc26x31x3() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0));
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc27x0x0() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(backers[msg.sender] == 0);
		Donate();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc27x0x1() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(msg.sender == owner);
		GetFunds();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc27x0x2() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc27x0x4() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		t();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc27x1x0() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(backers[msg.sender] == 0);
		Donate();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc27x1x1() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(msg.sender == owner);
		GetFunds();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc27x1x2() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc27x1x4() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		t();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc27x2x0() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(backers[msg.sender] == 0);
		Donate();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc27x2x1() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(msg.sender == owner);
		GetFunds();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc27x2x2() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc27x2x4() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		t();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc27x3x0() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(backers[msg.sender] == 0);
		Donate();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc27x3x1() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(msg.sender == owner);
		GetFunds();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc27x3x2() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc27x3x4() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		t();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc27x4x0() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(backers[msg.sender] == 0);
		Donate();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc27x4x1() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(msg.sender == owner);
		GetFunds();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc27x4x2() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc27x4x4() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		t();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc27x5x0() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(backers[msg.sender] == 0);
		Donate();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc27x5x1() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(msg.sender == owner);
		GetFunds();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc27x5x2() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc27x5x4() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		t();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc27x6x0() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(backers[msg.sender] == 0);
		Donate();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc27x6x1() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(msg.sender == owner);
		GetFunds();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc27x6x2() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc27x6x4() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		t();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc27x7x0() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(backers[msg.sender] == 0);
		Donate();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc27x7x1() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(msg.sender == owner);
		GetFunds();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc27x7x2() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc27x7x4() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		t();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc27x8x0() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(backers[msg.sender] == 0);
		Donate();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc27x8x1() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(msg.sender == owner);
		GetFunds();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc27x8x2() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc27x8x4() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		t();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc27x9x0() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(backers[msg.sender] == 0);
		Donate();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc27x9x1() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(msg.sender == owner);
		GetFunds();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc27x9x2() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc27x9x4() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		t();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc27x10x0() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(backers[msg.sender] == 0);
		Donate();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc27x10x1() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(msg.sender == owner);
		GetFunds();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc27x10x2() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc27x10x4() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		t();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc27x11x0() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(backers[msg.sender] == 0);
		Donate();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc27x11x1() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(msg.sender == owner);
		GetFunds();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc27x11x2() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc27x11x4() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		t();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc27x12x0() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(backers[msg.sender] == 0);
		Donate();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc27x12x1() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(msg.sender == owner);
		GetFunds();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc27x12x2() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc27x12x4() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		t();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc27x13x0() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(backers[msg.sender] == 0);
		Donate();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc27x13x1() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(msg.sender == owner);
		GetFunds();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc27x13x2() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc27x13x4() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		t();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc27x14x0() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(backers[msg.sender] == 0);
		Donate();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc27x14x1() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(msg.sender == owner);
		GetFunds();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc27x14x2() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc27x14x4() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		t();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc27x15x0() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(backers[msg.sender] == 0);
		Donate();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc27x15x1() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(msg.sender == owner);
		GetFunds();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc27x15x2() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc27x15x4() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		t();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc27x16x0() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(backers[msg.sender] == 0);
		Donate();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc27x16x1() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(msg.sender == owner);
		GetFunds();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc27x16x2() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc27x16x4() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		t();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc27x17x0() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(backers[msg.sender] == 0);
		Donate();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc27x17x1() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(msg.sender == owner);
		GetFunds();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc27x17x2() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc27x17x4() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		t();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc27x18x0() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(backers[msg.sender] == 0);
		Donate();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc27x18x1() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(msg.sender == owner);
		GetFunds();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc27x18x2() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc27x18x4() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		t();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc27x19x0() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(backers[msg.sender] == 0);
		Donate();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc27x19x1() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(msg.sender == owner);
		GetFunds();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc27x19x2() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc27x19x4() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		t();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc27x20x0() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(backers[msg.sender] == 0);
		Donate();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc27x20x1() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(msg.sender == owner);
		GetFunds();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc27x20x2() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc27x20x4() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		t();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc27x21x0() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(backers[msg.sender] == 0);
		Donate();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc27x21x1() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(msg.sender == owner);
		GetFunds();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc27x21x2() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc27x21x4() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		t();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc27x22x0() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(backers[msg.sender] == 0);
		Donate();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc27x22x1() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(msg.sender == owner);
		GetFunds();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc27x22x2() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc27x22x4() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		t();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc27x23x0() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(backers[msg.sender] == 0);
		Donate();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc27x23x1() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(msg.sender == owner);
		GetFunds();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc27x23x2() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc27x23x4() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		t();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc27x24x0() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(backers[msg.sender] == 0);
		Donate();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc27x24x1() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(msg.sender == owner);
		GetFunds();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc27x24x2() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc27x24x4() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		t();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc27x25x0() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(backers[msg.sender] == 0);
		Donate();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc27x25x1() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(msg.sender == owner);
		GetFunds();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc27x25x2() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc27x25x4() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		t();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc27x26x0() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(backers[msg.sender] == 0);
		Donate();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc27x26x1() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(msg.sender == owner);
		GetFunds();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc27x26x2() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc27x26x4() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		t();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc27x27x0() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(backers[msg.sender] == 0);
		Donate();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc27x27x1() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(msg.sender == owner);
		GetFunds();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc27x27x2() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc27x27x4() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		t();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc27x28x0() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(backers[msg.sender] == 0);
		Donate();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc27x28x1() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(msg.sender == owner);
		GetFunds();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc27x28x2() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc27x28x4() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		t();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc27x29x0() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(backers[msg.sender] == 0);
		Donate();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc27x29x1() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(msg.sender == owner);
		GetFunds();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc27x29x2() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc27x29x4() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		t();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc27x30x0() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(backers[msg.sender] == 0);
		Donate();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc27x30x1() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(msg.sender == owner);
		GetFunds();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc27x30x2() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc27x30x4() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		t();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc27x31x0() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(backers[msg.sender] == 0);
		Donate();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc27x31x1() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(msg.sender == owner);
		GetFunds();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc27x31x2() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc27x31x4() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0);
		t();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc28x0x0() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(backers[msg.sender] == 0);
		Donate();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc28x0x1() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(msg.sender == owner);
		GetFunds();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc28x0x3() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc28x0x4() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		t();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc28x1x0() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(backers[msg.sender] == 0);
		Donate();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc28x1x1() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(msg.sender == owner);
		GetFunds();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc28x1x3() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc28x1x4() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		t();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc28x2x0() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(backers[msg.sender] == 0);
		Donate();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc28x2x1() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(msg.sender == owner);
		GetFunds();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc28x2x3() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc28x2x4() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		t();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc28x3x0() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(backers[msg.sender] == 0);
		Donate();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc28x3x1() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(msg.sender == owner);
		GetFunds();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc28x3x3() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc28x3x4() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		t();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc28x4x0() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(backers[msg.sender] == 0);
		Donate();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc28x4x1() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(msg.sender == owner);
		GetFunds();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc28x4x3() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc28x4x4() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		t();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc28x5x0() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(backers[msg.sender] == 0);
		Donate();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc28x5x1() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(msg.sender == owner);
		GetFunds();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc28x5x3() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc28x5x4() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		t();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc28x6x0() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(backers[msg.sender] == 0);
		Donate();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc28x6x1() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(msg.sender == owner);
		GetFunds();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc28x6x3() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc28x6x4() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		t();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc28x7x0() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(backers[msg.sender] == 0);
		Donate();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc28x7x1() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(msg.sender == owner);
		GetFunds();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc28x7x3() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc28x7x4() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		t();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc28x8x0() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(backers[msg.sender] == 0);
		Donate();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc28x8x1() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(msg.sender == owner);
		GetFunds();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc28x8x3() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc28x8x4() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		t();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc28x9x0() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(backers[msg.sender] == 0);
		Donate();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc28x9x1() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(msg.sender == owner);
		GetFunds();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc28x9x3() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc28x9x4() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		t();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc28x10x0() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(backers[msg.sender] == 0);
		Donate();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc28x10x1() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(msg.sender == owner);
		GetFunds();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc28x10x3() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc28x10x4() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		t();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc28x11x0() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(backers[msg.sender] == 0);
		Donate();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc28x11x1() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(msg.sender == owner);
		GetFunds();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc28x11x3() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc28x11x4() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		t();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc28x12x0() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(backers[msg.sender] == 0);
		Donate();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc28x12x1() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(msg.sender == owner);
		GetFunds();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc28x12x3() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc28x12x4() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		t();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc28x13x0() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(backers[msg.sender] == 0);
		Donate();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc28x13x1() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(msg.sender == owner);
		GetFunds();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc28x13x3() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc28x13x4() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		t();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc28x14x0() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(backers[msg.sender] == 0);
		Donate();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc28x14x1() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(msg.sender == owner);
		GetFunds();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc28x14x3() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc28x14x4() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		t();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc28x15x0() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(backers[msg.sender] == 0);
		Donate();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc28x15x1() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(msg.sender == owner);
		GetFunds();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc28x15x3() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc28x15x4() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		t();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc28x16x0() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(backers[msg.sender] == 0);
		Donate();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc28x16x1() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(msg.sender == owner);
		GetFunds();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc28x16x3() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc28x16x4() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		t();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc28x17x0() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(backers[msg.sender] == 0);
		Donate();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc28x17x1() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(msg.sender == owner);
		GetFunds();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc28x17x3() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc28x17x4() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		t();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc28x18x0() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(backers[msg.sender] == 0);
		Donate();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc28x18x1() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(msg.sender == owner);
		GetFunds();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc28x18x3() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc28x18x4() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		t();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc28x19x0() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(backers[msg.sender] == 0);
		Donate();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc28x19x1() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(msg.sender == owner);
		GetFunds();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc28x19x3() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc28x19x4() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		t();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc28x20x0() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(backers[msg.sender] == 0);
		Donate();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc28x20x1() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(msg.sender == owner);
		GetFunds();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc28x20x3() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc28x20x4() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		t();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc28x21x0() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(backers[msg.sender] == 0);
		Donate();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc28x21x1() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(msg.sender == owner);
		GetFunds();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc28x21x3() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc28x21x4() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		t();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc28x22x0() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(backers[msg.sender] == 0);
		Donate();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc28x22x1() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(msg.sender == owner);
		GetFunds();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc28x22x3() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc28x22x4() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		t();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc28x23x0() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(backers[msg.sender] == 0);
		Donate();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc28x23x1() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(msg.sender == owner);
		GetFunds();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc28x23x3() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc28x23x4() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		t();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc28x24x0() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(backers[msg.sender] == 0);
		Donate();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc28x24x1() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(msg.sender == owner);
		GetFunds();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc28x24x3() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc28x24x4() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		t();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc28x25x0() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(backers[msg.sender] == 0);
		Donate();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc28x25x1() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(msg.sender == owner);
		GetFunds();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc28x25x3() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc28x25x4() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		t();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc28x26x0() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(backers[msg.sender] == 0);
		Donate();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc28x26x1() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(msg.sender == owner);
		GetFunds();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc28x26x3() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc28x26x4() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		t();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc28x27x0() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(backers[msg.sender] == 0);
		Donate();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc28x27x1() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(msg.sender == owner);
		GetFunds();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc28x27x3() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc28x27x4() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		t();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc28x28x0() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(backers[msg.sender] == 0);
		Donate();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc28x28x1() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(msg.sender == owner);
		GetFunds();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc28x28x3() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc28x28x4() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		t();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc28x29x0() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(backers[msg.sender] == 0);
		Donate();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc28x29x1() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(msg.sender == owner);
		GetFunds();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc28x29x3() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc28x29x4() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		t();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc28x30x0() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(backers[msg.sender] == 0);
		Donate();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc28x30x1() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(msg.sender == owner);
		GetFunds();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc28x30x3() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc28x30x4() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		t();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc28x31x0() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(backers[msg.sender] == 0);
		Donate();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc28x31x1() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(msg.sender == owner);
		GetFunds();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc28x31x3() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc28x31x4() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		t();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc29x0x0() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(backers[msg.sender] == 0);
		Donate();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc29x0x2() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc29x0x3() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc29x0x4() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		t();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc29x1x0() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(backers[msg.sender] == 0);
		Donate();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc29x1x2() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc29x1x3() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc29x1x4() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		t();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc29x2x0() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(backers[msg.sender] == 0);
		Donate();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc29x2x2() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc29x2x3() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc29x2x4() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		t();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc29x3x0() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(backers[msg.sender] == 0);
		Donate();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc29x3x2() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc29x3x3() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc29x3x4() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		t();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc29x4x0() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(backers[msg.sender] == 0);
		Donate();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc29x4x2() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc29x4x3() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc29x4x4() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		t();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc29x5x0() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(backers[msg.sender] == 0);
		Donate();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc29x5x2() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc29x5x3() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc29x5x4() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		t();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc29x6x0() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(backers[msg.sender] == 0);
		Donate();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc29x6x2() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc29x6x3() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc29x6x4() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		t();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc29x7x0() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(backers[msg.sender] == 0);
		Donate();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc29x7x2() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc29x7x3() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc29x7x4() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		t();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc29x8x0() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(backers[msg.sender] == 0);
		Donate();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc29x8x2() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc29x8x3() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc29x8x4() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		t();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc29x9x0() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(backers[msg.sender] == 0);
		Donate();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc29x9x2() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc29x9x3() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc29x9x4() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		t();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc29x10x0() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(backers[msg.sender] == 0);
		Donate();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc29x10x2() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc29x10x3() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc29x10x4() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		t();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc29x11x0() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(backers[msg.sender] == 0);
		Donate();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc29x11x2() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc29x11x3() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc29x11x4() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		t();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc29x12x0() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(backers[msg.sender] == 0);
		Donate();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc29x12x2() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc29x12x3() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc29x12x4() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		t();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc29x13x0() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(backers[msg.sender] == 0);
		Donate();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc29x13x2() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc29x13x3() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc29x13x4() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		t();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc29x14x0() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(backers[msg.sender] == 0);
		Donate();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc29x14x2() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc29x14x3() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc29x14x4() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		t();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc29x15x0() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(backers[msg.sender] == 0);
		Donate();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc29x15x2() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc29x15x3() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc29x15x4() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		t();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc29x16x0() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(backers[msg.sender] == 0);
		Donate();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc29x16x2() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc29x16x3() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc29x16x4() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		t();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc29x17x0() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(backers[msg.sender] == 0);
		Donate();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc29x17x2() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc29x17x3() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc29x17x4() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		t();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc29x18x0() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(backers[msg.sender] == 0);
		Donate();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc29x18x2() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc29x18x3() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc29x18x4() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		t();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc29x19x0() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(backers[msg.sender] == 0);
		Donate();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc29x19x2() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc29x19x3() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc29x19x4() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		t();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc29x20x0() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(backers[msg.sender] == 0);
		Donate();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc29x20x2() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc29x20x3() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc29x20x4() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		t();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc29x21x0() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(backers[msg.sender] == 0);
		Donate();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc29x21x2() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc29x21x3() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc29x21x4() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		t();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc29x22x0() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(backers[msg.sender] == 0);
		Donate();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc29x22x2() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc29x22x3() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc29x22x4() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		t();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc29x23x0() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(backers[msg.sender] == 0);
		Donate();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc29x23x2() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc29x23x3() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc29x23x4() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		t();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc29x24x0() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(backers[msg.sender] == 0);
		Donate();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc29x24x2() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc29x24x3() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc29x24x4() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		t();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc29x25x0() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(backers[msg.sender] == 0);
		Donate();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc29x25x2() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc29x25x3() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc29x25x4() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		t();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc29x26x0() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(backers[msg.sender] == 0);
		Donate();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc29x26x2() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc29x26x3() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc29x26x4() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		t();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc29x27x0() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(backers[msg.sender] == 0);
		Donate();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc29x27x2() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc29x27x3() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc29x27x4() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		t();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc29x28x0() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(backers[msg.sender] == 0);
		Donate();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc29x28x2() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc29x28x3() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc29x28x4() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		t();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc29x29x0() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(backers[msg.sender] == 0);
		Donate();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc29x29x2() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc29x29x3() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc29x29x4() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		t();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc29x30x0() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(backers[msg.sender] == 0);
		Donate();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc29x30x2() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc29x30x3() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc29x30x4() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		t();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc29x31x0() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(backers[msg.sender] == 0);
		Donate();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc29x31x2() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc29x31x3() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc29x31x4() hasInitialized payable public {
		require((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		t();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc30x0x1() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(msg.sender == owner);
		GetFunds();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc30x0x2() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc30x0x3() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc30x0x4() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		t();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc30x1x1() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(msg.sender == owner);
		GetFunds();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc30x1x2() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc30x1x3() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc30x1x4() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		t();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc30x2x1() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(msg.sender == owner);
		GetFunds();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc30x2x2() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc30x2x3() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc30x2x4() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		t();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc30x3x1() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(msg.sender == owner);
		GetFunds();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc30x3x2() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc30x3x3() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc30x3x4() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		t();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc30x4x1() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(msg.sender == owner);
		GetFunds();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc30x4x2() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc30x4x3() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc30x4x4() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		t();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc30x5x1() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(msg.sender == owner);
		GetFunds();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc30x5x2() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc30x5x3() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc30x5x4() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		t();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc30x6x1() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(msg.sender == owner);
		GetFunds();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc30x6x2() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc30x6x3() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc30x6x4() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		t();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc30x7x1() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(msg.sender == owner);
		GetFunds();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc30x7x2() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc30x7x3() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc30x7x4() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		t();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc30x8x1() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(msg.sender == owner);
		GetFunds();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc30x8x2() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc30x8x3() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc30x8x4() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		t();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc30x9x1() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(msg.sender == owner);
		GetFunds();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc30x9x2() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc30x9x3() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc30x9x4() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		t();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc30x10x1() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(msg.sender == owner);
		GetFunds();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc30x10x2() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc30x10x3() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc30x10x4() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		t();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc30x11x1() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(msg.sender == owner);
		GetFunds();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc30x11x2() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc30x11x3() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc30x11x4() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		t();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc30x12x1() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(msg.sender == owner);
		GetFunds();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc30x12x2() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc30x12x3() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc30x12x4() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		t();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc30x13x1() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(msg.sender == owner);
		GetFunds();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc30x13x2() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc30x13x3() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc30x13x4() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		t();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc30x14x1() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(msg.sender == owner);
		GetFunds();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc30x14x2() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc30x14x3() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc30x14x4() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		t();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc30x15x1() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(msg.sender == owner);
		GetFunds();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc30x15x2() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc30x15x3() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc30x15x4() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		t();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc30x16x1() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(msg.sender == owner);
		GetFunds();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc30x16x2() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc30x16x3() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc30x16x4() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		t();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc30x17x1() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(msg.sender == owner);
		GetFunds();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc30x17x2() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc30x17x3() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc30x17x4() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		t();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc30x18x1() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(msg.sender == owner);
		GetFunds();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc30x18x2() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc30x18x3() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc30x18x4() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		t();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc30x19x1() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(msg.sender == owner);
		GetFunds();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc30x19x2() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc30x19x3() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc30x19x4() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		t();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc30x20x1() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(msg.sender == owner);
		GetFunds();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc30x20x2() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc30x20x3() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc30x20x4() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		t();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc30x21x1() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(msg.sender == owner);
		GetFunds();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc30x21x2() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc30x21x3() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc30x21x4() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		t();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc30x22x1() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(msg.sender == owner);
		GetFunds();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc30x22x2() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc30x22x3() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc30x22x4() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		t();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc30x23x1() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(msg.sender == owner);
		GetFunds();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc30x23x2() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc30x23x3() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc30x23x4() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		t();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc30x24x1() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(msg.sender == owner);
		GetFunds();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc30x24x2() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc30x24x3() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc30x24x4() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		t();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc30x25x1() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(msg.sender == owner);
		GetFunds();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc30x25x2() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc30x25x3() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc30x25x4() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		t();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc30x26x1() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(msg.sender == owner);
		GetFunds();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc30x26x2() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc30x26x3() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc30x26x4() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		t();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc30x27x1() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(msg.sender == owner);
		GetFunds();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc30x27x2() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc30x27x3() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc30x27x4() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		t();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc30x28x1() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(msg.sender == owner);
		GetFunds();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc30x28x2() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc30x28x3() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc30x28x4() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		t();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc30x29x1() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(msg.sender == owner);
		GetFunds();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc30x29x2() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc30x29x3() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc30x29x4() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		t();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc30x30x1() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(msg.sender == owner);
		GetFunds();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc30x30x2() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc30x30x3() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc30x30x4() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		t();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc30x31x1() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(msg.sender == owner);
		GetFunds();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc30x31x2() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc30x31x3() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc30x31x4() hasInitialized payable public {
		require(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		t();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc31x0x0() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(backers[msg.sender] == 0);
		Donate();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc31x0x1() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(msg.sender == owner);
		GetFunds();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc31x0x2() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc31x0x3() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc31x0x4() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		t();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc31x1x0() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(backers[msg.sender] == 0);
		Donate();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc31x1x1() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(msg.sender == owner);
		GetFunds();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc31x1x2() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc31x1x3() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc31x1x4() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		t();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc31x2x0() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(backers[msg.sender] == 0);
		Donate();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc31x2x1() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(msg.sender == owner);
		GetFunds();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc31x2x2() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc31x2x3() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc31x2x4() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		t();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc31x3x0() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(backers[msg.sender] == 0);
		Donate();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc31x3x1() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(msg.sender == owner);
		GetFunds();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc31x3x2() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc31x3x3() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc31x3x4() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		t();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc31x4x0() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(backers[msg.sender] == 0);
		Donate();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc31x4x1() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(msg.sender == owner);
		GetFunds();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc31x4x2() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc31x4x3() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc31x4x4() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		t();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc31x5x0() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(backers[msg.sender] == 0);
		Donate();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc31x5x1() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(msg.sender == owner);
		GetFunds();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc31x5x2() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc31x5x3() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc31x5x4() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		t();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc31x6x0() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(backers[msg.sender] == 0);
		Donate();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc31x6x1() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(msg.sender == owner);
		GetFunds();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc31x6x2() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc31x6x3() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc31x6x4() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		t();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc31x7x0() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(backers[msg.sender] == 0);
		Donate();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc31x7x1() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(msg.sender == owner);
		GetFunds();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc31x7x2() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc31x7x3() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc31x7x4() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		t();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc31x8x0() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(backers[msg.sender] == 0);
		Donate();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc31x8x1() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(msg.sender == owner);
		GetFunds();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc31x8x2() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc31x8x3() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc31x8x4() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		t();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc31x9x0() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(backers[msg.sender] == 0);
		Donate();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc31x9x1() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(msg.sender == owner);
		GetFunds();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc31x9x2() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc31x9x3() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc31x9x4() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		t();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc31x10x0() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(backers[msg.sender] == 0);
		Donate();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc31x10x1() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(msg.sender == owner);
		GetFunds();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc31x10x2() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc31x10x3() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc31x10x4() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		t();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc31x11x0() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(backers[msg.sender] == 0);
		Donate();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc31x11x1() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(msg.sender == owner);
		GetFunds();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc31x11x2() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc31x11x3() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc31x11x4() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		t();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc31x12x0() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(backers[msg.sender] == 0);
		Donate();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc31x12x1() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(msg.sender == owner);
		GetFunds();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc31x12x2() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc31x12x3() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc31x12x4() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		t();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc31x13x0() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(backers[msg.sender] == 0);
		Donate();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc31x13x1() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(msg.sender == owner);
		GetFunds();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc31x13x2() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc31x13x3() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc31x13x4() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		t();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc31x14x0() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(backers[msg.sender] == 0);
		Donate();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc31x14x1() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(msg.sender == owner);
		GetFunds();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc31x14x2() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc31x14x3() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc31x14x4() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		t();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc31x15x0() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(backers[msg.sender] == 0);
		Donate();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc31x15x1() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(msg.sender == owner);
		GetFunds();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc31x15x2() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc31x15x3() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc31x15x4() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		t();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc31x16x0() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(backers[msg.sender] == 0);
		Donate();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc31x16x1() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(msg.sender == owner);
		GetFunds();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc31x16x2() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc31x16x3() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc31x16x4() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		t();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && !(donadores_reentrada.length == 0)&& true));
	}
	function vc31x17x0() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(backers[msg.sender] == 0);
		Donate();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc31x17x1() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(msg.sender == owner);
		GetFunds();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc31x17x2() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc31x17x3() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc31x17x4() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		t();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc31x18x0() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(backers[msg.sender] == 0);
		Donate();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc31x18x1() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(msg.sender == owner);
		GetFunds();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc31x18x2() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc31x18x3() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc31x18x4() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		t();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc31x19x0() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(backers[msg.sender] == 0);
		Donate();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc31x19x1() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(msg.sender == owner);
		GetFunds();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc31x19x2() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc31x19x3() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc31x19x4() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		t();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc31x20x0() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(backers[msg.sender] == 0);
		Donate();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc31x20x1() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(msg.sender == owner);
		GetFunds();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc31x20x2() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc31x20x3() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc31x20x4() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		t();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc31x21x0() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(backers[msg.sender] == 0);
		Donate();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc31x21x1() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(msg.sender == owner);
		GetFunds();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc31x21x2() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc31x21x3() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc31x21x4() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		t();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc31x22x0() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(backers[msg.sender] == 0);
		Donate();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc31x22x1() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(msg.sender == owner);
		GetFunds();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc31x22x2() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc31x22x3() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc31x22x4() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		t();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc31x23x0() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(backers[msg.sender] == 0);
		Donate();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc31x23x1() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(msg.sender == owner);
		GetFunds();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc31x23x2() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc31x23x3() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc31x23x4() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		t();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc31x24x0() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(backers[msg.sender] == 0);
		Donate();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc31x24x1() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(msg.sender == owner);
		GetFunds();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc31x24x2() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc31x24x3() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc31x24x4() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		t();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc31x25x0() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(backers[msg.sender] == 0);
		Donate();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc31x25x1() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(msg.sender == owner);
		GetFunds();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc31x25x2() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc31x25x3() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc31x25x4() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		t();
		assert(!(!((max_block > blockNumber)) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc31x26x0() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(backers[msg.sender] == 0);
		Donate();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc31x26x1() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(msg.sender == owner);
		GetFunds();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc31x26x2() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc31x26x3() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc31x26x4() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		t();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && !(donadores_reentrada.length == 0)&& true));
	}
	function vc31x27x0() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(backers[msg.sender] == 0);
		Donate();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc31x27x1() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(msg.sender == owner);
		GetFunds();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc31x27x2() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc31x27x3() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc31x27x4() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		t();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && !(donadores_reentrada.length > 0) && donadores_reentrada.length == 0&& true));
	}
	function vc31x28x0() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(backers[msg.sender] == 0);
		Donate();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc31x28x1() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(msg.sender == owner);
		GetFunds();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc31x28x2() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc31x28x3() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc31x28x4() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		t();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && !((blockNumber > max_block && !funded && goal > balance && _donadores > 0)) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc31x29x0() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(backers[msg.sender] == 0);
		Donate();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc31x29x1() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(msg.sender == owner);
		GetFunds();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc31x29x2() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc31x29x3() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc31x29x4() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		t();
		assert(!((max_block > blockNumber) && !((max_block < blockNumber && goal <= balance)) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc31x30x0() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(backers[msg.sender] == 0);
		Donate();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc31x30x1() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(msg.sender == owner);
		GetFunds();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc31x30x2() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc31x30x3() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc31x30x4() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		t();
		assert(!(!((max_block > blockNumber)) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc31x31x0() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(backers[msg.sender] == 0);
		Donate();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc31x31x1() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(msg.sender == owner);
		GetFunds();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc31x31x2() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(backers[msg.sender] > 0);
		Claim_Init();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc31x31x3() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		require(donadores_reentrada[donadores_reentrada.length-1] == msg.sender);
		Claim_End();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
	function vc31x31x4() hasInitialized payable public {
		require((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0);
		t();
		assert(!((max_block > blockNumber) && (max_block < blockNumber && goal <= balance) && (blockNumber > max_block && !funded && goal > balance && _donadores > 0) && donadores_reentrada.length > 0 && donadores_reentrada.length == 0&& true));
	}
    address payable owner;
    uint max_block;
    uint goal;
    uint blockNumber;
    
    mapping ( address => uint ) backers;
    // address[] backersArray = new address[](0);
    // address[] auxArray;
    bool funded = false;
    uint balance = 0;
    // uint _cont = 0;
    address _last;
    uint _donadores = 0;
    address[] donadores_reentrada = new address[](0);

    function my_constructor( address payable _owner , uint _max_block , uint _goal, uint _blockNumber ) hasNotInitialized public {
        owner = _owner;
        max_block = _max_block;
        goal = _goal;
        balance = 0;
        blockNumber = _blockNumber;
				has_initialized = true;
    }

    function Donate () hasInitialized public payable {
        // require (_donadores < LIMIT);
        require ( max_block > blockNumber);
        require ( backers [msg.sender] == 0);
        backers [msg.sender] = msg.value;
        if (msg.value > 0) {
            // backersArray.push(msg.sender);
            balance = balance + msg.value;
            _donadores += 1;
        }
    }
    
    function GetFunds () hasInitialized public {
        require (max_block < blockNumber);
        require (msg.sender == owner);
        require (goal <= balance);
        // owner.call.value(balance)("");
        funded = true;
        balance = 0;
    }

    function Claim_Init () hasInitialized public {
        require (max_block < blockNumber);
        require (backers[msg.sender] > 0 && !funded);
        require (goal > balance);

        require (_donadores > 0);

        uint val = backers[msg.sender];
        // msg.sender.call.value(val)("");
        balance = balance - val;
        donadores_reentrada.push(msg.sender);
        backers[msg.sender] = 0;
    }

    function Claim_End () hasInitialized public {
        // require (_cont > 0);
        require (donadores_reentrada.length > 0);
        require (donadores_reentrada[donadores_reentrada.length-1] == msg.sender);

        _donadores -= 1;
        // backers[msg.sender] = 0;
    }

    function t() hasInitialized public {
        require(donadores_reentrada.length == 0);
        blockNumber = blockNumber + 1;
    }

    //function dummy_balanceGTZero() hasInitialized public { }
    //function dummy_balanceIsZero() hasInitialized public { }

 }